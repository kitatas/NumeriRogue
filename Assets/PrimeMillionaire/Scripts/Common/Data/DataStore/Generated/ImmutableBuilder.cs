// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using PrimeMillionaire.Common.Data.DataStore;
using System.Collections.Generic;
using System;
using UnityEngine;
using PrimeMillionaire.Common.Data.DataStore.Tables;

namespace PrimeMillionaire.Common.Data.DataStore
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<BonusTargetMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new BonusTargetMasterTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void RemoveBonusTargetMaster(int[] keys)
        {
            var data = RemoveCore(memory.BonusTargetMasterTable.GetRawDataUnsafe(), keys, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new BonusTargetMasterTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void Diff(BonusTargetMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.BonusTargetMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new BonusTargetMasterTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<CardMaster> data)
        {
            var newData = CloneAndSortBy(data, x => (x.Suit, x.Rank), System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default);
            var table = new CardMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                table,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void RemoveCardMaster((int Suit, int Rank)[] keys)
        {
            var data = RemoveCore(memory.CardMasterTable.GetRawDataUnsafe(), keys, x => (x.Suit, x.Rank), System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default);
            var newData = CloneAndSortBy(data, x => (x.Suit, x.Rank), System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default);
            var table = new CardMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                table,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void Diff(CardMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.CardMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.Suit, x.Rank), System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default);
            var newData = CloneAndSortBy(data, x => (x.Suit, x.Rank), System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default);
            var table = new CardMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                table,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<CharacterMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new CharacterMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                table,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void RemoveCharacterMaster(int[] keys)
        {
            var data = RemoveCore(memory.CharacterMasterTable.GetRawDataUnsafe(), keys, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new CharacterMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                table,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void Diff(CharacterMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.CharacterMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new CharacterMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                table,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<CharacterStageMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new CharacterStageMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                table,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void RemoveCharacterStageMaster(int[] keys)
        {
            var data = RemoveCore(memory.CharacterStageMasterTable.GetRawDataUnsafe(), keys, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new CharacterStageMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                table,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void Diff(CharacterStageMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.CharacterStageMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new CharacterStageMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                table,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<DropRateMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Turn, System.Collections.Generic.Comparer<int>.Default);
            var table = new DropRateMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                table,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void RemoveDropRateMaster(int[] keys)
        {
            var data = RemoveCore(memory.DropRateMasterTable.GetRawDataUnsafe(), keys, x => x.Turn, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Turn, System.Collections.Generic.Comparer<int>.Default);
            var table = new DropRateMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                table,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void Diff(DropRateMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.DropRateMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Turn, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Turn, System.Collections.Generic.Comparer<int>.Default);
            var table = new DropRateMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                table,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<LevelMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new LevelMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                table,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void RemoveLevelMaster(int[] keys)
        {
            var data = RemoveCore(memory.LevelMasterTable.GetRawDataUnsafe(), keys, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new LevelMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                table,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void Diff(LevelMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.LevelMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new LevelMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                table,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<NumericBonusMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new NumericBonusMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                table,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void RemoveNumericBonusMaster(int[] keys)
        {
            var data = RemoveCore(memory.NumericBonusMasterTable.GetRawDataUnsafe(), keys, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new NumericBonusMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                table,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void Diff(NumericBonusMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.NumericBonusMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new NumericBonusMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                table,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<NumericMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Value, System.Collections.Generic.Comparer<int>.Default);
            var table = new NumericMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                table,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }


        public void ReplaceAll(System.Collections.Generic.IList<SkillBaseMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillBaseMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                table,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void RemoveSkillBaseMaster(int[] keys)
        {
            var data = RemoveCore(memory.SkillBaseMasterTable.GetRawDataUnsafe(), keys, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillBaseMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                table,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void Diff(SkillBaseMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.SkillBaseMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillBaseMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                table,
                memory.SkillEffectMasterTable,
                memory.SkillTargetMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SkillEffectMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillEffectMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                table,
                memory.SkillTargetMasterTable
            
            );
        }


        public void ReplaceAll(System.Collections.Generic.IList<SkillTargetMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Target, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillTargetMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                table
            
            );
        }

        public void RemoveSkillTargetMaster(int[] keys)
        {
            var data = RemoveCore(memory.SkillTargetMasterTable.GetRawDataUnsafe(), keys, x => x.Target, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Target, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillTargetMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                table
            
            );
        }

        public void Diff(SkillTargetMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.SkillTargetMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Target, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Target, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillTargetMasterTable(newData);
            memory = new MemoryDatabase(
                memory.BonusTargetMasterTable,
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.CharacterStageMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.NumericBonusMasterTable,
                memory.NumericMasterTable,
                memory.SkillBaseMasterTable,
                memory.SkillEffectMasterTable,
                table
            
            );
        }

    }
}