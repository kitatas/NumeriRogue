// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using PrimeMillionaire.Common.Data.DataStore;
using System.Collections.Generic;
using System;
using PrimeMillionaire.Common.Data.DataStore.Tables;

namespace PrimeMillionaire.Common.Data.DataStore
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<CardMaster> data)
        {
            var newData = CloneAndSortBy(data, x => (x.Suit, x.Rank), System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default);
            var table = new CardMasterTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void RemoveCardMaster((int Suit, int Rank)[] keys)
        {
            var data = RemoveCore(memory.CardMasterTable.GetRawDataUnsafe(), keys, x => (x.Suit, x.Rank), System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default);
            var newData = CloneAndSortBy(data, x => (x.Suit, x.Rank), System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default);
            var table = new CardMasterTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void Diff(CardMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.CardMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.Suit, x.Rank), System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default);
            var newData = CloneAndSortBy(data, x => (x.Suit, x.Rank), System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default);
            var table = new CardMasterTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<CharacterMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new CharacterMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                table,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void RemoveCharacterMaster(int[] keys)
        {
            var data = RemoveCore(memory.CharacterMasterTable.GetRawDataUnsafe(), keys, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new CharacterMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                table,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void Diff(CharacterMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.CharacterMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new CharacterMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                table,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<DeckMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new DeckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                table,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void RemoveDeckMaster(int[] keys)
        {
            var data = RemoveCore(memory.DeckMasterTable.GetRawDataUnsafe(), keys, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new DeckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                table,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void Diff(DeckMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.DeckMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new DeckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                table,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<DropRateMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Turn, System.Collections.Generic.Comparer<int>.Default);
            var table = new DropRateMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                table,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void RemoveDropRateMaster(int[] keys)
        {
            var data = RemoveCore(memory.DropRateMasterTable.GetRawDataUnsafe(), keys, x => x.Turn, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Turn, System.Collections.Generic.Comparer<int>.Default);
            var table = new DropRateMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                table,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void Diff(DropRateMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.DropRateMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Turn, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Turn, System.Collections.Generic.Comparer<int>.Default);
            var table = new DropRateMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                table,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<LevelMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new LevelMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                table,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void RemoveLevelMaster(int[] keys)
        {
            var data = RemoveCore(memory.LevelMasterTable.GetRawDataUnsafe(), keys, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new LevelMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                table,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void Diff(LevelMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.LevelMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new LevelMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                table,
                memory.PrimeNumberMasterTable,
                memory.SkillEffectMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<PrimeNumberMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Value, System.Collections.Generic.Comparer<int>.Default);
            var table = new PrimeNumberMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                table,
                memory.SkillEffectMasterTable
            
            );
        }

        public void RemovePrimeNumberMaster(int[] keys)
        {
            var data = RemoveCore(memory.PrimeNumberMasterTable.GetRawDataUnsafe(), keys, x => x.Value, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Value, System.Collections.Generic.Comparer<int>.Default);
            var table = new PrimeNumberMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                table,
                memory.SkillEffectMasterTable
            
            );
        }

        public void Diff(PrimeNumberMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.PrimeNumberMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Value, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Value, System.Collections.Generic.Comparer<int>.Default);
            var table = new PrimeNumberMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                table,
                memory.SkillEffectMasterTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SkillEffectMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Type, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillEffectMasterTable(newData);
            memory = new MemoryDatabase(
                memory.CardMasterTable,
                memory.CharacterMasterTable,
                memory.DeckMasterTable,
                memory.DropRateMasterTable,
                memory.LevelMasterTable,
                memory.PrimeNumberMasterTable,
                table
            
            );
        }


    }
}