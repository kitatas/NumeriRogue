// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using PrimeMillionaire.Common.Data.DataStore;
using System.Collections.Generic;
using System;
using UnityEngine;
using PrimeMillionaire.Common.Data.DataStore.Tables;

namespace PrimeMillionaire.Common.Data.DataStore
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public CardMasterTable CardMasterTable { get; private set; }
        public CharacterMasterTable CharacterMasterTable { get; private set; }
        public DeckMasterTable DeckMasterTable { get; private set; }
        public DropRateMasterTable DropRateMasterTable { get; private set; }
        public LevelMasterTable LevelMasterTable { get; private set; }
        public SkillEffectMasterTable SkillEffectMasterTable { get; private set; }
        public SkillMasterTable SkillMasterTable { get; private set; }

        public MemoryDatabase(
            CardMasterTable CardMasterTable,
            CharacterMasterTable CharacterMasterTable,
            DeckMasterTable DeckMasterTable,
            DropRateMasterTable DropRateMasterTable,
            LevelMasterTable LevelMasterTable,
            SkillEffectMasterTable SkillEffectMasterTable,
            SkillMasterTable SkillMasterTable
        )
        {
            this.CardMasterTable = CardMasterTable;
            this.CharacterMasterTable = CharacterMasterTable;
            this.DeckMasterTable = DeckMasterTable;
            this.DropRateMasterTable = DropRateMasterTable;
            this.LevelMasterTable = LevelMasterTable;
            this.SkillEffectMasterTable = SkillEffectMasterTable;
            this.SkillMasterTable = SkillMasterTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.CardMasterTable = ExtractTableData<CardMaster, CardMasterTable>(header, databaseBinary, options, xs => new CardMasterTable(xs));
            this.CharacterMasterTable = ExtractTableData<CharacterMaster, CharacterMasterTable>(header, databaseBinary, options, xs => new CharacterMasterTable(xs));
            this.DeckMasterTable = ExtractTableData<DeckMaster, DeckMasterTable>(header, databaseBinary, options, xs => new DeckMasterTable(xs));
            this.DropRateMasterTable = ExtractTableData<DropRateMaster, DropRateMasterTable>(header, databaseBinary, options, xs => new DropRateMasterTable(xs));
            this.LevelMasterTable = ExtractTableData<LevelMaster, LevelMasterTable>(header, databaseBinary, options, xs => new LevelMasterTable(xs));
            this.SkillEffectMasterTable = ExtractTableData<SkillEffectMaster, SkillEffectMasterTable>(header, databaseBinary, options, xs => new SkillEffectMasterTable(xs));
            this.SkillMasterTable = ExtractTableData<SkillMaster, SkillMasterTable>(header, databaseBinary, options, xs => new SkillMasterTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.CardMasterTable = ExtractTableData<CardMaster, CardMasterTable>(header, databaseBinary, options, xs => new CardMasterTable(xs)),
                () => this.CharacterMasterTable = ExtractTableData<CharacterMaster, CharacterMasterTable>(header, databaseBinary, options, xs => new CharacterMasterTable(xs)),
                () => this.DeckMasterTable = ExtractTableData<DeckMaster, DeckMasterTable>(header, databaseBinary, options, xs => new DeckMasterTable(xs)),
                () => this.DropRateMasterTable = ExtractTableData<DropRateMaster, DropRateMasterTable>(header, databaseBinary, options, xs => new DropRateMasterTable(xs)),
                () => this.LevelMasterTable = ExtractTableData<LevelMaster, LevelMasterTable>(header, databaseBinary, options, xs => new LevelMasterTable(xs)),
                () => this.SkillEffectMasterTable = ExtractTableData<SkillEffectMaster, SkillEffectMasterTable>(header, databaseBinary, options, xs => new SkillEffectMasterTable(xs)),
                () => this.SkillMasterTable = ExtractTableData<SkillMaster, SkillMasterTable>(header, databaseBinary, options, xs => new SkillMasterTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.CardMasterTable.GetRawDataUnsafe());
            builder.Append(this.CharacterMasterTable.GetRawDataUnsafe());
            builder.Append(this.DeckMasterTable.GetRawDataUnsafe());
            builder.Append(this.DropRateMasterTable.GetRawDataUnsafe());
            builder.Append(this.LevelMasterTable.GetRawDataUnsafe());
            builder.Append(this.SkillEffectMasterTable.GetRawDataUnsafe());
            builder.Append(this.SkillMasterTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.CardMasterTable.GetRawDataUnsafe());
            builder.Append(this.CharacterMasterTable.GetRawDataUnsafe());
            builder.Append(this.DeckMasterTable.GetRawDataUnsafe());
            builder.Append(this.DropRateMasterTable.GetRawDataUnsafe());
            builder.Append(this.LevelMasterTable.GetRawDataUnsafe());
            builder.Append(this.SkillEffectMasterTable.GetRawDataUnsafe());
            builder.Append(this.SkillMasterTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                CardMasterTable,
                CharacterMasterTable,
                DeckMasterTable,
                DropRateMasterTable,
                LevelMasterTable,
                SkillEffectMasterTable,
                SkillMasterTable,
            });

            ((ITableUniqueValidate)CardMasterTable).ValidateUnique(result);
            ValidateTable(CardMasterTable.All, database, "(Suit, Rank)", CardMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)CharacterMasterTable).ValidateUnique(result);
            ValidateTable(CharacterMasterTable.All, database, "Type", CharacterMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)DeckMasterTable).ValidateUnique(result);
            ValidateTable(DeckMasterTable.All, database, "Type", DeckMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)DropRateMasterTable).ValidateUnique(result);
            ValidateTable(DropRateMasterTable.All, database, "Turn", DropRateMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)LevelMasterTable).ValidateUnique(result);
            ValidateTable(LevelMasterTable.All, database, "Level", LevelMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SkillEffectMasterTable).ValidateUnique(result);
            ValidateTable(SkillEffectMasterTable.All, database, "Type", SkillEffectMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SkillMasterTable).ValidateUnique(result);
            ValidateTable(SkillMasterTable.All, database, "Type", SkillMasterTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "CardMaster":
                    return db.CardMasterTable;
                case "CharacterMaster":
                    return db.CharacterMasterTable;
                case "DeckMaster":
                    return db.DeckMasterTable;
                case "DropRateMaster":
                    return db.DropRateMasterTable;
                case "LevelMaster":
                    return db.LevelMasterTable;
                case "SkillEffectMaster":
                    return db.SkillEffectMasterTable;
                case "SkillMaster":
                    return db.SkillMasterTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("CardMaster", PrimeMillionaire.Common.Data.DataStore.Tables.CardMasterTable.CreateMetaTable());
            dict.Add("CharacterMaster", PrimeMillionaire.Common.Data.DataStore.Tables.CharacterMasterTable.CreateMetaTable());
            dict.Add("DeckMaster", PrimeMillionaire.Common.Data.DataStore.Tables.DeckMasterTable.CreateMetaTable());
            dict.Add("DropRateMaster", PrimeMillionaire.Common.Data.DataStore.Tables.DropRateMasterTable.CreateMetaTable());
            dict.Add("LevelMaster", PrimeMillionaire.Common.Data.DataStore.Tables.LevelMasterTable.CreateMetaTable());
            dict.Add("SkillEffectMaster", PrimeMillionaire.Common.Data.DataStore.Tables.SkillEffectMasterTable.CreateMetaTable());
            dict.Add("SkillMaster", PrimeMillionaire.Common.Data.DataStore.Tables.SkillMasterTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}