// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.PrimeMillionaire.Common.Data.DataStore
{
    public sealed class NumericBonusMasterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::PrimeMillionaire.Common.Data.DataStore.NumericBonusMaster>
    {
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // Rate
        private static global::System.ReadOnlySpan<byte> GetSpan_Rate() => new byte[1 + 4] { 164, 82, 97, 116, 101 };
        // SkillTypes
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillTypes() => new byte[1 + 10] { 170, 83, 107, 105, 108, 108, 84, 121, 112, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::PrimeMillionaire.Common.Data.DataStore.NumericBonusMaster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Type());
            writer.Write(value.Type);
            writer.WriteRaw(GetSpan_Rate());
            writer.Write(value.Rate);
            writer.WriteRaw(GetSpan_SkillTypes());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Serialize(ref writer, value.SkillTypes, options);
        }

        public global::PrimeMillionaire.Common.Data.DataStore.NumericBonusMaster Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Type__ = default(int);
            var __Rate__ = default(int);
            var __SkillTypes__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701869908UL:
                                __Type__ = reader.ReadInt32();
                                continue;
                            case 1702125906UL:
                                __Rate__ = reader.ReadInt32();
                                continue;
                        }
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SkillTypes().Slice(1))) { goto FAIL; }

                        __SkillTypes__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::PrimeMillionaire.Common.Data.DataStore.NumericBonusMaster(__Type__, __Rate__, __SkillTypes__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
