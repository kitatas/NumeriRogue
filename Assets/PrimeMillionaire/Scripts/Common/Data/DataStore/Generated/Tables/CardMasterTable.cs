// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using PrimeMillionaire.Common.Data.DataStore;
using System.Collections.Generic;
using System;

namespace PrimeMillionaire.Common.Data.DataStore.Tables
{
   public sealed partial class CardMasterTable : TableBase<CardMaster>, ITableUniqueValidate
   {
        public Func<CardMaster, (int Suit, int Rank)> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<CardMaster, (int Suit, int Rank)> primaryIndexSelector;


        public CardMasterTable(CardMaster[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => (x.Suit, x.Rank);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();


        public CardMaster FindBySuitAndRank((int Suit, int Rank) key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default, key, true);
        }
        
        public bool TryFindBySuitAndRank((int Suit, int Rank) key, out CardMaster result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default, key, out result);
        }

        public CardMaster FindClosestBySuitAndRank((int Suit, int Rank) key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default, key, selectLower);
        }

        public RangeView<CardMaster> FindRangeBySuitAndRank((int Suit, int Rank) min, (int Suit, int Rank) max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "(Suit, Rank)", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(CardMaster), typeof(CardMasterTable), "CardMaster",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(CardMaster).GetProperty("Suit")),
                    new MasterMemory.Meta.MetaProperty(typeof(CardMaster).GetProperty("Rank")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(CardMaster).GetProperty("Suit"),
                        typeof(CardMaster).GetProperty("Rank"),
                    }, true, true, System.Collections.Generic.Comparer<(int Suit, int Rank)>.Default),
                });
        }

#endif
    }
}