// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using PrimeMillionaire.Game.Data.DataStore;
using System.Collections.Generic;
using System;

namespace PrimeMillionaire.Game.Data.DataStore.Tables
{
   public sealed partial class ParameterMasterTable : TableBase<ParameterMaster>, ITableUniqueValidate
   {
        public Func<ParameterMaster, CharacterType> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<ParameterMaster, CharacterType> primaryIndexSelector;


        public ParameterMasterTable(ParameterMaster[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.Type;
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();


        public ParameterMaster FindByType(CharacterType key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<CharacterType>.Default, key, true);
        }
        
        public bool TryFindByType(CharacterType key, out ParameterMaster result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<CharacterType>.Default, key, out result);
        }

        public ParameterMaster FindClosestByType(CharacterType key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<CharacterType>.Default, key, selectLower);
        }

        public RangeView<ParameterMaster> FindRangeByType(CharacterType min, CharacterType max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<CharacterType>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "Type", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(ParameterMaster), typeof(ParameterMasterTable), "ParameterMaster",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(ParameterMaster).GetProperty("Type")),
                    new MasterMemory.Meta.MetaProperty(typeof(ParameterMaster).GetProperty("Hp")),
                    new MasterMemory.Meta.MetaProperty(typeof(ParameterMaster).GetProperty("Atk")),
                    new MasterMemory.Meta.MetaProperty(typeof(ParameterMaster).GetProperty("Def")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(ParameterMaster).GetProperty("Type"),
                    }, true, true, System.Collections.Generic.Comparer<CharacterType>.Default),
                });
        }

#endif
    }
}