// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using PrimeMillionaire.Game.Data.DataStore;
using System.Collections.Generic;
using System;

namespace PrimeMillionaire.Game.Data.DataStore.Tables
{
   public sealed partial class CharacterMasterTable : TableBase<CharacterMaster>, ITableUniqueValidate
   {
        public Func<CharacterMaster, CharacterType> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<CharacterMaster, CharacterType> primaryIndexSelector;


        public CharacterMasterTable(CharacterMaster[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.type;
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();


        public CharacterMaster FindBytype(CharacterType key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<CharacterType>.Default, key, true);
        }
        
        public bool TryFindBytype(CharacterType key, out CharacterMaster result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<CharacterType>.Default, key, out result);
        }

        public CharacterMaster FindClosestBytype(CharacterType key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<CharacterType>.Default, key, selectLower);
        }

        public RangeView<CharacterMaster> FindRangeBytype(CharacterType min, CharacterType max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<CharacterType>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "type", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(CharacterMaster), typeof(CharacterMasterTable), "CharacterMaster",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(CharacterMaster).GetProperty("type")),
                    new MasterMemory.Meta.MetaProperty(typeof(CharacterMaster).GetProperty("objPath")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(CharacterMaster).GetProperty("type"),
                    }, true, true, System.Collections.Generic.Comparer<CharacterType>.Default),
                });
        }

#endif
    }
}